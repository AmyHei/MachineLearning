{
  "cells": [
    {
      "metadata": {
        "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
        "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5"
      },
      "cell_type": "markdown",
      "source": "### This is my first kernel so all feedback is appreciated\n\n### Link for the github repository(RMarkdown EDA and Python Tensorflow model): https://github.com/dimitreOliveira/HousePrices\nobs1: some of the code is can only be seen in the \"code\" tab\n\nobs2: kernel with the model code at https://www.kaggle.com/dimitreoliveira/house-prices-deep-learning-aproach\n\n![](https://kaggle2.blob.core.windows.net/competitions/kaggle/5407/media/housesbanner.png)\n\n# Introduction\n\n## Deep Learning regression using Tensorflow for house prices prediction.\n\n### House Prices: Advanced Regression Techniques\n\nlink for the kaggle competition: https://www.kaggle.com/c/house-prices-advanced-regression-techniques\n\ndatasets: https://www.kaggle.com/c/house-prices-advanced-regression-techniques/data\n\nrepository with the code of this notebook and the tensorflow model: https://github.com/dimitreOliveira/HousePrices\n\n### Overview\nAsk a home buyer to describe their dream house, and they probably won't begin with the height of the basement ceiling or the proximity to an east-west railroad. But this playground competition's dataset proves that much more influences price negotiations than the number of bedrooms or a white-picket fence.\n\nWith 79 explanatory variables describing (almost) every aspect of residential homes in Ames, Iowa, this competition challenges you to predict the final price of each home.\n\n### Acknowledgments\nThe Ames Housing dataset was compiled by Dean De Cock for use in data science education. It's an incredible alternative for data scientists looking for a modernized and expanded version of the often cited Boston Housing dataset. \n\n# Exploratory Data Analysis"
    },
    {
      "metadata": {
        "_cell_guid": "79c7e3d0-c299-4dcb-8224-4455121ee9b0",
        "_uuid": "d629ff2d2480ee46fbb7e2d37f6b5fab8052498a",
        "_kg_hide-output": true,
        "_kg_hide-input": false,
        "trusted": false
      },
      "cell_type": "code",
      "source": "# set up\nlibrary(dplyr)\nlibrary(corrplot)\nlibrary(ggplot2)\noptions(scipen = 4)",
      "execution_count": null,
      "outputs": []
    },
    {
      "metadata": {
        "_cell_guid": "48301720-c22d-4af4-b4ce-bdb66cb51d4b",
        "_uuid": "1f8504a6ea406513b045588ec056df7d0979636d",
        "trusted": false
      },
      "cell_type": "code",
      "source": "# Loading data\ntrain <- read.csv(\"../input/train.csv\", encoding=\"UTF-8\")\ntest <- read.csv(\"../input/test.csv\", encoding=\"UTF-8\")\nsample_submission <- read.csv(\"../input/sample_submission.csv\", encoding=\"UTF-8\")",
      "execution_count": null,
      "outputs": []
    },
    {
      "metadata": {
        "_cell_guid": "c7cf3a04-1000-45c9-ae10-ff04ae8aab94",
        "_uuid": "42b32ab67330ec137e342523fab85574bdef0199"
      },
      "cell_type": "markdown",
      "source": "### Null occurrence\n\nFirst let's take a look at how many null values we have on the train set."
    },
    {
      "metadata": {
        "_cell_guid": "ab50772c-36d9-4386-85dd-326ce2d97c97",
        "_uuid": "a187d666d2e5b2d4c4cab7224649eb06d4b1a3d8",
        "trusted": false
      },
      "cell_type": "code",
      "source": "missing_values <- sapply(train, function(x) sum(is.na(x)))\nnull_count <- data.frame(Count = missing_values, Proportion = missing_values/nrow(train))\nnull_count_gteZero <- null_count[null_count$Count > 0, ]\nnull_count_gteZero[order(-null_count_gteZero$Count),]",
      "execution_count": null,
      "outputs": []
    },
    {
      "metadata": {
        "_cell_guid": "8e628be4-9f90-4b7c-aec0-e0dc5e85d329",
        "_uuid": "4448f2a32604f40bab07fdb0d05fffa9a82c1886"
      },
      "cell_type": "markdown",
      "source": "As we can see we have lots of null values among all columns, to make our work easier we'll take them out for now and latter decide how to deal with them."
    },
    {
      "metadata": {
        "_cell_guid": "b34c82d9-0738-4804-badf-23f3a7ccc2eb",
        "_uuid": "d9284a9550f7c25520989a5cb85232f43ac8cb71",
        "trusted": false
      },
      "cell_type": "code",
      "source": "train_non_null <- select(train, -LotFrontage, -Alley, -MasVnrType, -MasVnrArea, -FireplaceQu, -GarageType, -GarageYrBlt, -GarageFinish, -GarageQual, -GarageCond, -BsmtQual, -BsmtCond, -BsmtExposure, -BsmtFinType1, -PoolQC, -Fence, -MiscFeature, -BsmtFinType1, -BsmtFinType2, -Electrical, -BsmtFinSF2, -BsmtUnfSF, -TotalBsmtSF, -BsmtFullBath, -BsmtHalfBath, -GarageCars, -GarageArea, -MSZoning, -Utilities, -Exterior1st, -Exterior2nd,  -BsmtFinSF1, -KitchenQual, -Functional, -SaleType)",
      "execution_count": null,
      "outputs": []
    },
    {
      "metadata": {
        "_cell_guid": "d06ae60e-7433-45b8-b290-39197e6d5a84",
        "_uuid": "c26d59b2f8e86586c633ef276479594729422d00"
      },
      "cell_type": "markdown",
      "source": "### Label analysis\n\nNow we have our train set with no null values, so first let's take a look at how is our label feature (\"SalePrice\") distribution with a histogram and see the feature summary."
    },
    {
      "metadata": {
        "_cell_guid": "cbb097df-05ae-4b31-9c15-e64e2cfb9670",
        "_uuid": "53a33d8e97d51ecb2ba1274e12fe00df6e594aa4",
        "_kg_hide-input": true,
        "trusted": false
      },
      "cell_type": "code",
      "source": "ggplot(data=train_non_null, aes(train_non_null$SalePrice)) + \n  geom_histogram(col=\"red\", aes(fill=..count..)) +\n  scale_fill_gradient(\"Count\", low=\"white\", high=\"red\") + \n  labs(title = \"Sale price histogram\", x = \"Sale price\", y = \"Count\")\n\nsummary(train_non_null$SalePrice)",
      "execution_count": null,
      "outputs": []
    },
    {
      "metadata": {
        "_cell_guid": "dbc3087d-27f4-4f51-bea3-ce684e6a7644",
        "_uuid": "7e84960d36b1134b4f4cd80dd1f318a6233b6718"
      },
      "cell_type": "markdown",
      "source": "We can see some interesting properties, our label has a peak around 160000, then it starts to decline and forms a long tail ending at 75500, as our summary shows.\n\nNext we will apply a logarithmic transformation to ma"
    },
    {
      "metadata": {
        "_cell_guid": "86c8b869-ed98-4e85-9982-b1d3dd37909a",
        "_uuid": "04dbc2c06fd81825e362dd728bfebbe9df1c7204",
        "_kg_hide-input": true,
        "trusted": false
      },
      "cell_type": "code",
      "source": "train_non_null$SalePrice <- log1p(train_non_null$SalePrice)\n\nggplot(data=train_non_null, aes(train_non_null$SalePrice)) + \n  geom_histogram(col=\"red\", aes(fill=..count..)) +\n  scale_fill_gradient(\"Count\", low=\"white\", high=\"red\") + \n  labs(title = \"Sale price histogram\", x = \"Sale price\", y = \"Count\")\n\nsummary(train_non_null$SalePrice)",
      "execution_count": null,
      "outputs": []
    },
    {
      "metadata": {
        "_cell_guid": "774f2ef0-d0ab-416d-a100-f92c832c8483",
        "_uuid": "bb446ed63d8e4c717fd6f474b72f6e05207a0e3e"
      },
      "cell_type": "markdown",
      "source": "### Numerical features correlation\n\nAfter this let's start taking a look at how the remaining 26 numeric features correlate with the target \"SalePrice\" with a correlation matrix."
    },
    {
      "metadata": {
        "_cell_guid": "d973e1ab-f11e-4e6b-875f-b75f837c2c71",
        "_uuid": "604653923f7a1a147d469a9b2888afd9e7695ea3",
        "collapsed": true,
        "trusted": false
      },
      "cell_type": "code",
      "source": "# Selecting only numeric features\ntrain_numeric <- select(train_non_null, -HouseStyle, -RoofMatl, -Heating, -Condition2, -RoofStyle, -ExterQual, -BldgType, -ExterCond, -Foundation, -HeatingQC, -CentralAir, -Condition1, -Neighborhood, -LandSlope, -LotConfig, -LandContour, -LotShape, -Street, -PavedDrive, -SaleCondition)",
      "execution_count": null,
      "outputs": []
    },
    {
      "metadata": {
        "_cell_guid": "30f33216-4f8c-4bc4-ad28-2da49b07f6bd",
        "_uuid": "901a4ecb1bdb655238cbd0c3e390ba2298fa3e35",
        "collapsed": true,
        "trusted": false
      },
      "cell_type": "code",
      "source": "# Store the overall correlation in 'correlations'\ncorrelations <- cor(train_numeric[,1:27])\n\n# Plot the correlation plot with 'correlations'\ncorrplot(correlations, method=\"square\", type = \"upper\")",
      "execution_count": null,
      "outputs": []
    },
    {
      "metadata": {
        "_cell_guid": "a090acc9-6d2c-4e6c-8433-6c36c7e6e288",
        "_uuid": "db997e3910dd29a780f91293bbc83fe9b4f49e1f"
      },
      "cell_type": "markdown",
      "source": "### Categorical features correlation"
    },
    {
      "metadata": {
        "_cell_guid": "24296a27-5e87-4fb4-ac44-ca63123662e0",
        "_uuid": "87a7ca075751560be025a737d800a8278ed4db76",
        "collapsed": true,
        "trusted": false
      },
      "cell_type": "code",
      "source": "# Selecting only categorical features and the label\ntrain_categoric <- select(train_non_null, HouseStyle, RoofMatl, Heating, Condition2, RoofStyle, ExterQual, BldgType,  ExterCond, Foundation, HeatingQC, CentralAir, Condition1, Neighborhood, LandSlope, LotConfig, LandContour, LotShape, Street, PavedDrive, SaleCondition, SalePrice)",
      "execution_count": null,
      "outputs": []
    },
    {
      "metadata": {
        "_cell_guid": "72062007-d012-4157-9238-4adb9b810e62",
        "_uuid": "429f45693aee62ae021da77777e1c6a6de31aa83"
      },
      "cell_type": "markdown",
      "source": "And to our remaining 20 categorical features lets take a look at some box plots, to feel how our data behaves with \"SalePrice\"."
    },
    {
      "metadata": {
        "_cell_guid": "f6bd5a00-2873-4932-a835-da04e8e4a9f6",
        "_uuid": "e5f5ae77b23a4e92c0ca508b1569be290c848c35",
        "collapsed": true,
        "_kg_hide-input": true,
        "trusted": false
      },
      "cell_type": "code",
      "source": "ggplot(data=train_categoric, aes(y= SalePrice, x=HouseStyle, fill=HouseStyle) ) + \n  geom_boxplot() + \n  ggtitle(\"Distribution of HouseStyle\") +  \n  ylab(\"Sale Price\") + \n  xlab(\"HouseStyle\")\n\nggplot(data=train_categoric, aes(y= SalePrice, x=RoofMatl, fill=RoofMatl ) ) + \n  geom_boxplot() + \n  ggtitle(\"Distribution of RoofMatl\") +  \n  ylab(\"Sale Price\") + \n  xlab(\"RoofMatl\")\n\nggplot(data=train_categoric, aes(y= SalePrice, x=Heating, fill=Heating ) ) + \n  geom_boxplot() + \n  ggtitle(\"Distribution of Heating\") +  \n  ylab(\"Sale Price\") + \n  xlab(\"Heating\")\n\nggplot(data=train_categoric, aes(y= SalePrice, x=Condition2, fill=Condition2) ) + \n  geom_boxplot() + \n  ggtitle(\"Distribution of Condition2\") +  \n  ylab(\"Sale Price\") + \n  xlab(\"Condition2\")\n\nggplot(data=train_categoric, aes(y= SalePrice, x=RoofStyle, fill=RoofStyle) ) + \n  geom_boxplot() + \n  ggtitle(\"Distribution of RoofStyle\") +  \n  ylab(\"Sale Price\") + \n  xlab(\"RoofStyle\")\n\nggplot(data=train_categoric, aes(y= SalePrice, x=ExterQual, fill=ExterQual ) ) + \n  geom_boxplot() + \n  ggtitle(\"Distribution of ExterQual\") +  \n  ylab(\"Sale Price\") + \n  xlab(\"ExterQual\")\n\nggplot(data=train_categoric, aes(y= SalePrice, x=BldgType, fill=BldgType) ) + \n  geom_boxplot() + \n  ggtitle(\"Distribution of BldgType\") +  \n  ylab(\"Sale Price\") + \n  xlab(\"BldgType\")\n\nggplot(data=train_categoric, aes(y= SalePrice, x=ExterCond, fill=ExterCond) ) + \n  geom_boxplot() + \n  ggtitle(\"Distribution of ExterCond\") +  \n  ylab(\"Sale Price\") + \n  xlab(\"ExterCond\")\n\nggplot(data=train_categoric, aes(y= SalePrice, x=Foundation, fill=Foundation) ) + \n  geom_boxplot() + \n  ggtitle(\"Distribution of Foundation\") +  \n  ylab(\"Sale Price\") + \n  xlab(\"Foundation\")\n\nggplot(data=train_categoric, aes(y= SalePrice, x=HeatingQC, fill=HeatingQC) ) + \n  geom_boxplot() + \n  ggtitle(\"Distribution of HeatingQC\") +  \n  ylab(\"Sale Price\") + \n  xlab(\"HeatingQC\")\n\nggplot(data=train_categoric, aes(y= SalePrice, x=CentralAir, fill=CentralAir) ) + \n  geom_boxplot() + \n  ggtitle(\"Distribution of CentralAir\") +  \n  ylab(\"Sale Price\") + \n  xlab(\"CentralAir\")\n\nggplot(data=train_categoric, aes(y= SalePrice, x=Condition1, fill=Condition1) ) + \n  geom_boxplot() + \n  ggtitle(\"Distribution of Condition1\") +  \n  ylab(\"Sale Price\") + \n  xlab(\"Condition1\")\n\nggplot(data=train_categoric, aes(y= SalePrice, x=Neighborhood, fill=Neighborhood) ) + \n  geom_boxplot() + \n  ggtitle(\"Distribution of Neighborhood\") +  \n  ylab(\"Sale Price\") + \n  xlab(\"Neighborhood\")\n\nggplot(data=train_categoric, aes(y= SalePrice, x=LandSlope, fill=LandSlope) ) + \n  geom_boxplot() + \n  ggtitle(\"Distribution of LandSlope\") +  \n  ylab(\"Sale Price\") + \n  xlab(\"LandSlope\")\n\nggplot(data=train_categoric, aes(y= SalePrice, x=LotConfig, fill=LotConfig) ) + \n  geom_boxplot() + \n  ggtitle(\"Distribution of LotConfig\") +  \n  ylab(\"Sale Price\") + \n  xlab(\"LotConfig\")\n\nggplot(data=train_categoric, aes(y= SalePrice, x=LandContour, fill=LandContour) ) + \n  geom_boxplot() + \n  ggtitle(\"Distribution of LandContour\") +  \n  ylab(\"Sale Price\") + \n  xlab(\"LandContour\")\n\nggplot(data=train_categoric, aes(y= SalePrice, x=LotShape, fill=LotShape) ) + \n  geom_boxplot() + \n  ggtitle(\"Distribution of LotShape\") +  \n  ylab(\"Sale Price\") + \n  xlab(\"LotShape\")\n\nggplot(data=train_categoric, aes(y= SalePrice, x=Street, fill=Street) ) + \n  geom_boxplot() + \n  ggtitle(\"Distribution of Street\") +  \n  ylab(\"Sale Price\") + \n  xlab(\"Street\")\n\nggplot(data=train_categoric, aes(y= SalePrice, x=PavedDrive, fill=PavedDrive) ) + \n  geom_boxplot() + \n  ggtitle(\"Distribution of PavedDrive\") +  \n  ylab(\"Sale Price\") + \n  xlab(\"PavedDrive\")\n\nggplot(data=train_categoric, aes(y= SalePrice, x=SaleCondition, fill=SaleCondition) ) + \n  geom_boxplot() + \n  ggtitle(\"Distribution of SaleCondition\") +  \n  ylab(\"Sale Price\") + \n  xlab(\"SaleCondition\")",
      "execution_count": null,
      "outputs": []
    },
    {
      "metadata": {
        "_cell_guid": "93bcb473-db2e-4f4c-9546-3169767735f2",
        "_uuid": "48dc76f827156261e79c0dc480779eaa889b92bc"
      },
      "cell_type": "markdown",
      "source": "As we can see we have lots of features that have really low correlation (numerical) or low variance (categorical) with with \"SalePrice\", features like this can disturb the training of our model, maybe latter we can feature engineer them to have more useful features, but for now we'll set them aside to have a simpler model.\n\n# Data pre-processing\n\nNow that we have more information about the features of our dataset, we can filter out all the unwanted features and work with a cleaner dataset."
    },
    {
      "metadata": {
        "_cell_guid": "60d05735-6af7-45b9-8cc3-f57621920f34",
        "_uuid": "3dca92a0eaab0d5a44f5bc6a5b35d6582c22d364",
        "collapsed": true,
        "trusted": false
      },
      "cell_type": "code",
      "source": "# removing low correlation numerical\ntrain_clean <- select(train_non_null, -MSSubClass, -OverallCond, -LowQualFinSF, -BedroomAbvGr, -KitchenAbvGr, -EnclosedPorch, -X3SsnPorch, -ScreenPorch, -PoolArea, -MiscVal, -MoSold, -YrSold)\n# removing low variance categorical\ntrain_clean <- select(train_clean, -RoofStyle, -BldgType, -LandSlope, -LotConfig, -LandContour, -Heating, -ExterCond, -RoofMatl, -Condition1, -Condition2, -Street)",
      "execution_count": null,
      "outputs": []
    },
    {
      "metadata": {
        "_cell_guid": "782f9502-c681-45ca-8348-1b37f8dee871",
        "_uuid": "76d08154f4573f41add3854efc47de27d54c745c"
      },
      "cell_type": "markdown",
      "source": "### Features behavior\n\nAfter filtering out the unwanted features let's take a look how our remaining features behaves with the target features and others with some scatter plot matrices."
    },
    {
      "metadata": {
        "_cell_guid": "a0bff406-506d-4f53-85cd-1b67c904c16d",
        "_uuid": "ba887568e44b6cc545aa75c63e1a21f6ab2ef21b",
        "collapsed": true,
        "_kg_hide-input": true,
        "trusted": false
      },
      "cell_type": "code",
      "source": "pairs(~ LotArea + Neighborhood + OverallQual + OpenPorchSF + SalePrice, data = train_clean)\npairs(~ YearBuilt + YearRemodAdd + ExterQual + Foundation + SalePrice, data = train_clean)\npairs(~ HeatingQC + X1stFlrSF + X2ndFlrSF + FullBath + SalePrice, data = train_clean)\npairs(~ HalfBath + WoodDeckSF + PavedDrive + Fireplaces + SalePrice, data = train_clean)\npairs(~ TotRmsAbvGrd + GrLivArea + SaleCondition + SalePrice, data = train_clean)",
      "execution_count": null,
      "outputs": []
    },
    {
      "metadata": {
        "_cell_guid": "285bba70-e482-4ddf-97e6-f8b3ec4c25bf",
        "_uuid": "94dc13a509ba01b357446b8a40028e840cf055bb"
      },
      "cell_type": "markdown",
      "source": "### Data inference\n\nNow we can go back to our features with null values, the ones with high amount of missing data (more than 15%) we will drop, as the effort of inferring values would probably be too much and would still have chances of adding bias to the training, but the remaining we will try to infer the missing values.\n\nAs the remaining missing features have low missing count, we will use a simple technique to infer data, we will replace the missing values with the median or mode of the feature."
    },
    {
      "metadata": {
        "_cell_guid": "fe622114-b71c-452d-ba02-827eec24dfd2",
        "_uuid": "c5ac04e0dbd424d32c591932b0c23e7166ec2e95",
        "collapsed": true,
        "trusted": false
      },
      "cell_type": "code",
      "source": "train_to_process_numerical <- select(train, BsmtFinSF2, BsmtUnfSF, TotalBsmtSF, BsmtFullBath, BsmtHalfBath, GarageCars, GarageArea, BsmtFinSF1)\n\ntrain_to_process_categorical <- select(train, MasVnrArea, GarageYrBlt, MasVnrType, GarageType, GarageFinish, GarageQual, GarageCond, BsmtQual, BsmtCond, BsmtExposure, BsmtFinType1, BsmtFinType1, BsmtFinType2, Electrical, MSZoning, Utilities, Exterior1st, Exterior2nd, KitchenQual, Functional, Fence, Alley, PoolQC, MiscFeature, SaleType)",
      "execution_count": null,
      "outputs": []
    },
    {
      "metadata": {
        "_cell_guid": "34780431-ba65-4c4a-967c-e401e40a4d40",
        "_uuid": "7aefe1a34af9e3b1b4c9bee6dc32752bca7534b1",
        "collapsed": true,
        "trusted": false
      },
      "cell_type": "code",
      "source": "Mode <- function(x) {\n  ux <- unique(x)\n  ux[which.max(tabulate(match(x, ux)))]\n}\n\nfor(i in 1:ncol(train_to_process_numerical)){\n  train_to_process_numerical[is.na(train_to_process_numerical[,i]), i] <- mean(train_to_process_numerical[,i], na.rm = TRUE)\n}\n\nfor(i in 1:ncol(train_to_process_categorical)){\n  train_to_process_categorical[is.na(train_to_process_categorical[,i]), i] <- Mode(train_to_process_categorical[,i])\n}",
      "execution_count": null,
      "outputs": []
    },
    {
      "metadata": {
        "_cell_guid": "d4d1f046-5648-4f27-acad-c585227ab424",
        "_uuid": "1260ec1bb57a60be443d29a26009beac50405b72"
      },
      "cell_type": "markdown",
      "source": "### Inferred data correlation\n\nNow let's take a look at how the date we just created behaves with the target feature the same way we did before.\n\nFirst the numerical features."
    },
    {
      "metadata": {
        "_cell_guid": "7e74a760-6588-4824-93ef-1edfe2c1f957",
        "_uuid": "5d59566640b6430f3f28250218a7f2d899a13461",
        "collapsed": true,
        "trusted": false
      },
      "cell_type": "code",
      "source": "# add target feature to the set\ntrain_to_process_numerical <- cbind(train_to_process_numerical, select(train, SalePrice))\n\n# Store the overall correlation in 'correlations'\ncorrelations <- cor(train_to_process_numerical[,1:9])\n\n# Plot the correlation plot with 'correlations'\ncorrplot(correlations, method=\"square\", type = \"upper\")",
      "execution_count": null,
      "outputs": []
    },
    {
      "metadata": {
        "_cell_guid": "57000b27-4a14-4837-91e2-1c937be5cfea",
        "_uuid": "57db868ad907b9d3cd65d1ee77a136f8459acc20"
      },
      "cell_type": "markdown",
      "source": "Then the categorical features."
    },
    {
      "metadata": {
        "_cell_guid": "220ab803-2470-4ee2-b989-3cea7245c719",
        "_uuid": "983914e3dd93e521202934b1d34c14f19d84cbfa",
        "collapsed": true,
        "_kg_hide-input": true,
        "trusted": false
      },
      "cell_type": "code",
      "source": "train_to_process_categorical <- cbind(train_to_process_categorical, select(train, SalePrice))\n\nggplot(data=train_to_process_categorical, aes(y= SalePrice, x=MasVnrArea, fill=MasVnrArea) ) + \n  geom_boxplot() + \n  ggtitle(\"Distribution of MasVnrArea\") +  \n  ylab(\"Sale Price\") + \n  xlab(\"MasVnrArea\")\n\nggplot(data=train_to_process_categorical, aes(y= SalePrice, x=GarageYrBlt, fill=GarageYrBlt) ) + \n  geom_boxplot() + \n  ggtitle(\"Distribution of GarageYrBlt\") +  \n  ylab(\"Sale Price\") + \n  xlab(\"GarageYrBlt\")\n\nggplot(data=train_to_process_categorical, aes(y= SalePrice, x=MasVnrType, fill=MasVnrType) ) + \n  geom_boxplot() + \n  ggtitle(\"Distribution of MasVnrType\") +  \n  ylab(\"Sale Price\") + \n  xlab(\"MasVnrType\")\n\nggplot(data=train_to_process_categorical, aes(y= SalePrice, x=GarageType, fill=GarageType) ) + \n  geom_boxplot() + \n  ggtitle(\"Distribution of GarageType\") +  \n  ylab(\"Sale Price\") + \n  xlab(\"GarageType\")\n\nggplot(data=train_to_process_categorical, aes(y= SalePrice, x=GarageFinish, fill=GarageFinish) ) + \n  geom_boxplot() + \n  ggtitle(\"Distribution of GarageFinish\") +  \n  ylab(\"Sale Price\") + \n  xlab(\"GarageFinish\")\n\nggplot(data=train_to_process_categorical, aes(y= SalePrice, x=MasVnrType, fill=GarageQual) ) + \n  geom_boxplot() + \n  ggtitle(\"Distribution of GarageQual\") +  \n  ylab(\"Sale Price\") + \n  xlab(\"GarageQual\")\n\nggplot(data=train_to_process_categorical, aes(y= SalePrice, x=GarageCond, fill=GarageCond) ) + \n  geom_boxplot() + \n  ggtitle(\"Distribution of GarageCond\") +  \n  ylab(\"Sale Price\") + \n  xlab(\"GarageCond\")\n\nggplot(data=train_to_process_categorical, aes(y= SalePrice, x=BsmtQual, fill=BsmtQual) ) + \n  geom_boxplot() + \n  ggtitle(\"Distribution of BsmtQual\") +  \n  ylab(\"Sale Price\") + \n  xlab(\"BsmtQual\")\n\nggplot(data=train_to_process_categorical, aes(y= SalePrice, x=MasVnrType, fill=BsmtCond) ) + \n  geom_boxplot() + \n  ggtitle(\"Distribution of BsmtCond\") +  \n  ylab(\"Sale Price\") + \n  xlab(\"BsmtCond\")\n\nggplot(data=train_to_process_categorical, aes(y= SalePrice, x=MasVnrType, fill=BsmtExposure) ) + \n  geom_boxplot() + \n  ggtitle(\"Distribution of BsmtExposure\") +  \n  ylab(\"Sale Price\") + \n  xlab(\"BsmtExposure\")\n\nggplot(data=train_to_process_categorical, aes(y= SalePrice, x=BsmtFinType1, fill=BsmtFinType1) ) + \n  geom_boxplot() + \n  ggtitle(\"Distribution of BsmtFinType1\") +  \n  ylab(\"Sale Price\") + \n  xlab(\"BsmtFinType1\")\n\nggplot(data=train_to_process_categorical, aes(y= SalePrice, x=BsmtFinType1, fill=BsmtFinType2) ) + \n  geom_boxplot() + \n  ggtitle(\"Distribution of BsmtFinType2\") +  \n  ylab(\"Sale Price\") + \n  xlab(\"BsmtFinType2\")\n\nggplot(data=train_to_process_categorical, aes(y= SalePrice, x=Electrical, fill=Electrical) ) + \n  geom_boxplot() + \n  ggtitle(\"Distribution of Electrical\") +  \n  ylab(\"Sale Price\") + \n  xlab(\"Electrical\")\n\nggplot(data=train_to_process_categorical, aes(y= SalePrice, x=MSZoning, fill=MSZoning) ) + \n  geom_boxplot() + \n  ggtitle(\"Distribution of MSZoning\") +  \n  ylab(\"Sale Price\") + \n  xlab(\"MSZoning\")\n\nggplot(data=train_to_process_categorical, aes(y= SalePrice, x=Utilities, fill=Utilities) ) + \n  geom_boxplot() + \n  ggtitle(\"Distribution of Utilities\") +  \n  ylab(\"Sale Price\") + \n  xlab(\"Utilities\")\n\nggplot(data=train_to_process_categorical, aes(y= SalePrice, x=Exterior1st, fill=Exterior1st) ) + \n  geom_boxplot() + \n  ggtitle(\"Distribution of Exterior1st\") +  \n  ylab(\"Sale Price\") + \n  xlab(\"Exterior1st\")\n\nggplot(data=train_to_process_categorical, aes(y= SalePrice, x=Exterior2nd, fill=Exterior2nd) ) + \n  geom_boxplot() + \n  ggtitle(\"Distribution of Exterior2nd\") +  \n  ylab(\"Sale Price\") + \n  xlab(\"Exterior2nd\")\n\nggplot(data=train_to_process_categorical, aes(y= SalePrice, x=KitchenQual, fill=KitchenQual) ) + \n  geom_boxplot() + \n  ggtitle(\"Distribution of KitchenQual\") +  \n  ylab(\"Sale Price\") + \n  xlab(\"KitchenQual\")\n\nggplot(data=train_to_process_categorical, aes(y= SalePrice, x=Functional, fill=Functional) ) + \n  geom_boxplot() + \n  ggtitle(\"Distribution of Functional\") +  \n  ylab(\"Sale Price\") + \n  xlab(\"Functional\")\n\nggplot(data=train_to_process_categorical, aes(y= SalePrice, x=SaleType, fill=SaleType) ) + \n  geom_boxplot() + \n  ggtitle(\"Distribution of SaleType\") +  \n  ylab(\"Sale Price\") + \n  xlab(\"SaleType\")",
      "execution_count": null,
      "outputs": []
    },
    {
      "metadata": {
        "_cell_guid": "9b4d030c-bbb9-4b77-934c-47bc12c94cee",
        "_uuid": "86a2cbdd84bb24ff2d6a53e8c81f8d986c285d7d"
      },
      "cell_type": "markdown",
      "source": "As you can see we still have a number of irrelevant features, so we will also remove them."
    },
    {
      "metadata": {
        "_cell_guid": "e620cfe4-0e99-43b6-b6f7-e297269f78c1",
        "_uuid": "8f57d50b6064fb2f315ef3cd9f232d315c1c283b",
        "collapsed": true,
        "trusted": false
      },
      "cell_type": "code",
      "source": "train_to_process <- cbind(select(train_to_process_categorical, -SalePrice), train_to_process_numerical)\n\ntrain_final <- cbind(select(train_to_process, -Alley, -BsmtFinType2, -Fence, -Functional, -Utilities, -PoolQC, -BsmtHalfBath, -BsmtFinSF2, -MiscFeature, -SalePrice), train_clean)",
      "execution_count": null,
      "outputs": []
    },
    {
      "metadata": {
        "_cell_guid": "074a2d4f-b91f-4c60-bc26-c60765329bbc",
        "_uuid": "9a04a346856af9e884b897b1a10ead97e1a549f9"
      },
      "cell_type": "markdown",
      "source": "Then we will do the same process to our test set."
    },
    {
      "metadata": {
        "_cell_guid": "ae158c8d-b014-49bf-9a98-5cfe4115f26a",
        "_uuid": "38ad05cee6bbc09c1a5c97be8cf75d56a3cead3e",
        "collapsed": true,
        "trusted": false
      },
      "cell_type": "code",
      "source": "test_non_null <- select(test, -LotFrontage, -Alley, -MasVnrType, -MasVnrArea, -FireplaceQu, -GarageType, -GarageYrBlt, -GarageFinish, -GarageQual, -GarageCond, -BsmtQual, -BsmtCond, -BsmtExposure, -BsmtFinType1, -PoolQC, -Fence, -MiscFeature, -BsmtFinType1, -BsmtFinType2, -Electrical, -BsmtFinSF2, -BsmtUnfSF, -TotalBsmtSF, -BsmtFullBath, -BsmtHalfBath, -GarageCars, -GarageArea, -MSZoning, -Utilities, -Exterior1st, -Exterior2nd,  -BsmtFinSF1, -KitchenQual, -Functional, -SaleType)\n\ntest_clean <- select(test_non_null, -MSSubClass, -OverallCond, -LowQualFinSF, -BedroomAbvGr, -KitchenAbvGr, -EnclosedPorch, -X3SsnPorch, -ScreenPorch, -PoolArea, -MiscVal, -MoSold, -YrSold)\ntest_clean <- select(test_clean, -RoofStyle, -BldgType, -LandSlope, -LotConfig, -LandContour, -Heating, -ExterCond, -RoofMatl, -Condition1, -Condition2, -Street)\n\ntest_to_process_numerical <- select(test, BsmtFinSF2, BsmtUnfSF, TotalBsmtSF, BsmtFullBath, BsmtHalfBath, GarageCars, GarageArea, BsmtFinSF1)\n\ntest_to_process_categorical <- select(test, MasVnrArea, GarageYrBlt, MasVnrType, GarageType, GarageFinish, GarageQual, GarageCond, BsmtQual, BsmtCond, BsmtExposure, BsmtFinType1, BsmtFinType1, BsmtFinType2, Electrical, MSZoning, Utilities, Exterior1st, Exterior2nd, KitchenQual, Functional, Fence, Alley, PoolQC, MiscFeature, SaleType)\n\n\nfor(i in 1:ncol(test_to_process_numerical)){\n  test_to_process_numerical[is.na(test_to_process_numerical[,i]), i] <- mean(test_to_process_numerical[,i], na.rm = TRUE)\n}\n\nfor(i in 1:ncol(test_to_process_categorical)){\n  test_to_process_categorical[is.na(test_to_process_categorical[,i]), i] <- Mode(test_to_process_categorical[,i])\n}\n\ntest_to_process <- cbind(test_to_process_categorical, test_to_process_numerical)\n\ntest_final <- cbind(select(test_to_process, -Alley, -BsmtFinType2, -Fence, -Functional, -Utilities, -PoolQC, -BsmtHalfBath, -BsmtFinSF2, -MiscFeature), test_clean)",
      "execution_count": null,
      "outputs": []
    },
    {
      "metadata": {
        "_cell_guid": "6fcd0e77-8c99-4d37-86fd-7f3a126774b5",
        "_uuid": "79a6dc062a2b28b6faeb7e8ad7921524b0a55b68"
      },
      "cell_type": "markdown",
      "source": "### Export the data\n\nAfter all the data cleaning and processing we can write the resulting data frame into two csv files (train and test) and use it on our model.\n\nreminder the link with the tensorflow code is at: https://github.com/dimitreOliveira/HousePrices"
    },
    {
      "metadata": {
        "_cell_guid": "61d73cb9-effa-4f7d-aafb-cf888b58ff6a",
        "_uuid": "f6bf78b2800b5b33decc6056f5dd54eb742f364a",
        "collapsed": true,
        "trusted": false
      },
      "cell_type": "code",
      "source": "test_non_null <- select(test, -LotFrontage, -Alley, -MasVnrType, -MasVnrArea, -FireplaceQu, -GarageType, -GarageYrBlt, -GarageFinish, -GarageQual, -GarageCond, -BsmtQual, -BsmtCond, -BsmtExposure, -BsmtFinType1, -PoolQC, -Fence, -MiscFeature, -BsmtFinType1, -BsmtFinType2, -Electrical, -BsmtFinSF2, -BsmtUnfSF, -TotalBsmtSF, -BsmtFullBath, -BsmtHalfBath, -GarageCars, -GarageArea, -MSZoning, -Utilities, -Exterior1st, -Exterior2nd,  -BsmtFinSF1, -KitchenQual, -Functional, -SaleType)\n\ntest_to_process_numerical <- select(test, BsmtFinSF2, BsmtUnfSF, TotalBsmtSF, BsmtFullBath, BsmtHalfBath, GarageCars, GarageArea, BsmtFinSF1)\n\ntest_to_process_categorical <- select(test, MasVnrArea, GarageYrBlt, MasVnrType, GarageType, GarageFinish, GarageQual, GarageCond, BsmtQual, BsmtCond, BsmtExposure, BsmtFinType1, BsmtFinType1, BsmtFinType2, Electrical, MSZoning, Utilities, Exterior1st, Exterior2nd, KitchenQual, Functional, SaleType)\n\nfor(i in 1:ncol(test_to_process_numerical)){\n  test_to_process_numerical[is.na(test_to_process_numerical[,i]), i] <- mean(test_to_process_numerical[,i], na.rm = TRUE)\n}\n\nfor(i in 1:ncol(test_to_process_categorical)){\n  test_to_process_categorical[is.na(test_to_process_categorical[,i]), i] <- Mode(test_to_process_categorical[,i])\n}\n\ntest_to_process <- cbind(test_to_process_categorical, test_to_process_numerical)",
      "execution_count": null,
      "outputs": []
    }
  ],
  "metadata": {
    "language_info": {
      "mimetype": "text/x-r-source",
      "name": "R",
      "pygments_lexer": "r",
      "version": "3.4.2",
      "file_extension": ".r",
      "codemirror_mode": "r"
    },
    "kernelspec": {
      "display_name": "R",
      "language": "R",
      "name": "ir"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 1
}